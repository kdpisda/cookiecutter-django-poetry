[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.email }}>"]

[tool.poetry.dependencies]
python = "^3.8.1"
pytz = "2023.3"
python-slugify = "8.0.1"
Pillow = "9.5.0"
argon2-cffi = "21.3.0"
redis = "4.5.4"
django = "4.1.8"
django-environ = "0.10.0"
django-model-utils = "4.3.1"
django-allauth = "0.54.0"
django-crispy-forms = "2.0"
crispy-bootstrap5 = "0.7"
django-redis = "5.2.0"

# Optional dependencies
{% if cookiecutter.frontend_pipeline == 'Django Compressor' %}
{% if cookiecutter.windows == 'y' and cookiecutter.use_docker == 'n' %}
rcssmin = "1.1.0"
{% else %}
rcssmin = "1.1.1"
{% endif %}
{% endif %}

{% if cookiecutter.use_whitenoise == 'y' %}
whitenoise = "6.4.0"
{% endif %}

{% if cookiecutter.use_docker == "y" or cookiecutter.windows == "n" %}
hiredis = "2.2.2"
{% endif %}

{% if cookiecutter.use_celery == "y" %}
celery = "5.2.7"
django-celery-beat = "2.5.0"
{% if cookiecutter.use_docker == 'y' %}
flower = "1.2.0"
{% endif %}
{% endif %}

{% if cookiecutter.use_async == 'y' %}
uvicorn = {extras = ["standard"], version = "0.21.1"}
{% endif %}

# Production Dependencies
gunicorn={version="^20.1.0",extras=["production"]}
psycopg2={version="^2.6.9",extras=["production"]}

{% if cookiecutter.use_whitenoise == 'n' %}
collectfast={version="^2.2.0",extras=["production"]}
{% endif %}

{% if cookiecutter.use_sentry == "y" %}
sentry-sdk={version="^1.20.0",extras=["django"]}
{% endif %}

{% if cookiecutter.use_docker == "n" and cookiecutter.windows == "y" %}
hiredis={version="^2.2.2",extras=["production"]}
{% endif %}

{% if cookiecutter.use_docker == "n" and cookiecutter.windows == "y" %}
hiredis = { version = "^2.2.2", extras = ["production"] }
{% endif %}

{% if cookiecutter.cloud_provider == 'AWS' %}
django-storages = { version = "^1.13.2", extras = ["boto3", "production"] }
{% elif cookiecutter.cloud_provider == 'GCP' %}
django-storages = { version = "^1.13.2", extras = ["google", "production"] }
{% elif cookiecutter.cloud_provider == 'Azure' %}
django-storages = { version = "^1.13.2", extras = ["azure", "production"] }
{% endif %}

{% if cookiecutter.mail_service == 'Mailgun' %}
django-anymail = { version = "^9.1", extras = ["mailgun", "production"] }
{% elif cookiecutter.mail_service == 'Amazon SES' %}
django-anymail = { version = "^9.1", extras = ["amazon_ses", "production"] }
{% elif cookiecutter.mail_service == 'Mailjet' %}
django-anymail = { version = "^9.1", extras = ["mailjet", "production"] }
{% elif cookiecutter.mail_service == 'Mandrill' %}
django-anymail = { version = "^9.1", extras = ["mandrill", "production"] }
{% elif cookiecutter.mail_service == 'Postmark' %}
django-anymail = { version = "^9.1", extras = ["postmark", "production"] }
{% elif cookiecutter.mail_service == 'Sendgrid' %}
django-anymail = { version = "^9.1", extras = ["sendgrid", "production"] }
{% elif cookiecutter.mail_service == 'SendinBlue' %}
django-anymail = { version = "^9.1", extras = ["sendinblue", "production"] }
{% elif cookiecutter.mail_service == 'SparkPost' %}
django-anymail = { version = "^9.1", extras = ["sparkpost", "production"] }
{% elif cookiecutter.mail_service == 'Other SMTP' %}
django-anymail = { version = "^9.1", extras = ["production"] }
{% endif %}

[tool.poetry.extras]
production = [
  "gunicorn",
  "psycopg2",
  {% if cookiecutter.use_whitenoise == 'n' %}"collectfast",{% endif %}
  {% if cookiecutter.use_sentry == "y" %}"sentry-sdk",{% endif %}
  {% if cookiecutter.use_docker == "n" and cookiecutter.windows == "y" %}"hiredis",{% endif %}
  "django-storages",
  "django-anymail"
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db"
python_files = [
    "tests.py",
    "test_*.py",
]
{% if cookiecutter.frontend_pipeline == 'Gulp' %}
norecursedirs = ["node_modules"]
{% endif %}

# ==== Coverage ====
[tool.coverage.run]
include = ["{{cookiecutter.project_slug}}/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]


# ==== black ====
[tool.black]
line-length = 119
target-version = ['py311']


# ==== isort ====
[tool.isort]
profile = "black"
line_length = 119
known_first_party = [
    "{{cookiecutter.project_slug}}",
    "config",
]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
{% if cookiecutter.use_drf == "y" %}
    "mypy_drf_plugin.main",
{% endif %}
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"


# ==== PyLint ====
[tool.pylint.MASTER]
load-plugins = [
    "pylint_django",
{% if cookiecutter.use_celery == "y" %}
    "pylint_celery",
{% endif %}
]
django-settings-module = "config.settings.local"

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "missing-docstring",
    "invalid-name",
]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
    "REQUEST",
    "acl_users",
    "aq_parent",
    "[a-zA-Z]+_set{1,2}",
    "save",
    "delete",
]

[tool.poetry.dev-dependencies]
Werkzeug = {extras = ["watchdog"], version = "2.2.3"}
ipdb = "0.13.13"

{% if cookiecutter.use_docker == 'y' %}
psycopg2 = "2.9.6"
{% else %}
psycopg2-binary = "2.9.6"
{% endif %}

{% if cookiecutter.use_async == 'y' or cookiecutter.use_celery == 'y' %}
watchfiles = "0.19.0"
{% endif %}

# Testing
mypy = "1.1.1"
django-stubs = "1.16.0"
pytest = "7.3.1"
pytest-sugar = "0.9.7"

{% if cookiecutter.use_drf == "y" %}
djangorestframework-stubs = "1.10.0"
{% endif %}

# Documentation
sphinx = "6.1.3"
sphinx-autobuild = "2021.3.14"

# Code quality
flake8 = "6.0.0"
flake8-isort = "6.0.0"
coverage = "7.2.2"
black = "23.3.0"
pylint-django = "2.5.3"

{% if cookiecutter.use_celery == 'y' %}
pylint-celery = "0.3"
{% endif %}

pre-commit = "3.2.2"

# Django
factory-boy = "3.2.1"
django-debug-toolbar = "4.0.0"
django-extensions = "3.2.1"
django-coverage-plugin = "3.0.0"
pytest-django = "4.5.2"
